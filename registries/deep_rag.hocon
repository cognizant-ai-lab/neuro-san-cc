
# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT

# The schema specifications for this file are documented here:
# https://github.com/cognizant-ai-lab/neuro-san/blob/main/docs/agent_hocon_reference.md

{
    # Optional metadata describing this agent network
    "metadata": {
        "description": "Demonstration of Abstract Deep RAG",
        "tags": ["rag"],
        "sample_queries": [
            """
I will give you files pertaining to the proceedings over the course
of several conferences and several years that the UN has held on climate change.

The files are in the directory: /<your_path>/neuro-san-cc/documents

File path structure:
* Any one file path will have 2 directories as part of its prefix:
    1) The 1st directory is the name of the conference, usually an abbreviation.
    2) The 2nd directory is superfluous, except when accessing the file directly.

* The filename portion of the path might have several components:
    1) Some reiteration of the conference, perhaps further abbreviated. This can be considered superfluous.
    2) A 4 digit year that the converence was held
    3) A sequence number distinguishin documents from the same year
    4) The last portion for the filename can consist of:
        a) A specific report number for the conference OR
        b) A label for specific groups of decisions made at the conference

* The ".txt" suffix that each file ends with has no bearing as to the content
  within the file other than its format and should not be considered for organizational purposes.

Grouping Constraints:
* Never mix files from different conferences in the same group.
* It's OK if a single conference needs more than one group
* If splitting a conference into multiple groups is necessary, try to make the split
  such that each group has the same number of files.

The list of files to use in order are:

CMA/CMA_txt/CMA2016_1.1_Decisions_1_to_2.txt
CMA/CMA_txt/CMA2018_1.3_Decisions_13_to_20.txt
CMA/CMA_txt/CMA2018_1.3_Decisions_3_to_12.txt
CMA/CMA_txt/CMA2019_2_Decisions_1_to_9.txt
CMA/CMA_txt/CMA2021_3_2021_Decisions_5.txt
CMA/CMA_txt/CMA2021_3_Decisions_1_to_4.txt
CMA/CMA_txt/CMA2021_3_Decisions_6_to_24.txt
CMA/CMA_txt/CMA2022_4_Decisions_12_to_24.txt
CMA/CMA_txt/CMA2022_4_Decisions_1_to_5.txt
CMA/CMA_txt/CMA2022_4_Decisions_6_to_11.txt
CMA/CMA_txt/CMA2023_5_Decisions_17_to_21.txt
CMA/CMA_txt/CMA2023_5_Decisions_1_to_5.txt
CMA/CMA_txt/CMA2023_5_Decisions_6_to_16.txt
CMA/CMA_txt/CMA2024_6_Decisions_16_to_23.txt
CMA/CMA_txt/CMA2024_6_Decisions_1_to_7.txt
CMA/CMA_txt/CMA2024_6_Decisions_8_to_15.txt
'CMP/CMP_txt/CMP2014_10 Decisions_1_to_8.txt'
CMP/CMP_txt/CMP2015_11_Decisions_1_to_5.txt
CMP/CMP_txt/CMP2015_11_decisions_6_to_12.txt
CMP/CMP_txt/CMP2016_12_Decisions_1_to_8.txt
CMP/CMP_txt/CMP2017_13_Decisions_1_to_7.txt
CMP/CMP_txt/CMP2018_14_Decisions_1_to_5.txt
CMP/CMP_txt/CMP2019_15_Decisions_1_to_7.txt
CMP/CMP_txt/CMP2021_16_Decisions_1_to_10.txt
CMP/CMP_txt/CMP2022_17_Decisions_1_to_9.txt
CMP/CMP_txt/CMP2023_18_Decisions_1_to_7.txt
CMP/CMP_txt/CMP2024_19_Decisions_1_to_5.txt
'COP/COP_txt/cp2014_20 - 2014 - decision 13 to 24.txt'
'COP/COP_txt/cp2014_20 - 2014 - decision 1.txt'
'COP/COP_txt/cp2014_20 - 2014 - decision 2 to 12.txt'
'COP/COP_txt/cp2015_21 - 2015 - decision 1.txt'
'COP/COP_txt/cp2015_21 - 2015 - decisions 14 to 23.txt'
'COP/COP_txt/cp2015_21 - 2015 - decisions 2 to 13.txt'
'COP/COP_txt/cp2016_22 - 2016 - decisions 14 to 22.txt'
'COP/COP_txt/cp2016_22 - 2016 - decisions 1 to 13.txt'
'COP/COP_txt/cp2017_23 - 2017 - decisions 13 to 22.txt'
'COP/COP_txt/cp2017_23 - 2017 - decisions 1 to 12.txt'
'COP/COP_txt/cp2018_24 - 2018 - decisions 13 to 20.txt'
'COP/COP_txt/cp2018_24 - 2018 - decisions 1 to 12.txt'
'COP/COP_txt/cp2019_25 - 2019 - Decisions 1 to 6.txt'
'COP/COP_txt/cp2019_25 - 2019 - Decisions 7 to 18.txt'
'COP/COP_txt/cp2021_26 - 2021 - Decisions 12 to 23.txt'
'COP/COP_txt/cp2021_26 - 2021 - Decisions 1 to 11.txt'
'COP/COP_txt/cp2022_27 - 2022 - Decisions 13 to 23.txt'
'COP/COP_txt/cp2022_27 - 2022 - Decisions 1 to 12.txt'
'COP/COP_txt/cp2022_27 - 2022 - Decisions 24 to 27.txt'
'COP/COP_txt/cp2023_28 - 2023 - Decisions 10 to 19.txt'
'COP/COP_txt/cp2023_28 - 2023 - Decisions 1 to 9.txt'
'COP/COP_txt/cp2024_29 - 2024 - Decisions 11 to 21.txt'
'COP/COP_txt/cp2024_29 - 2024 - Decisions 1 to 10.txt'
'SBI/SBI_txt/sbi2014_21 (report SB 41).txt'
'SBI/SBI_txt/sbi2014_8 (report SB 40).txt'
'SBI/SBI_txt/sbi2015_10 (report SB 42).txt'
'SBI/SBI_txt/sbi2015_22 (report SB 43).txt'
'SBI/SBI_txt/sbi2016_20 (report SB 45).txt'
'SBI/SBI_txt/sbi2016_8 (report SB 44).txt'
'SBI/SBI_txt/sbi2017_19 (report SB 47).txt'
'SBI/SBI_txt/sbi2017_7 (report SB 46).txt'
SBI/SBI_txt/sbi2018_11.txt
SBI/SBI_txt/sbi2018_22.txt
'SBI/SBI_txt/sbi2018_9 (report SB 48.1).txt'
SBI/SBI_txt/sbi2019_20.txt
SBI/SBI_txt/sbi2019_9.txt
SBI/SBI_txt/sbi2021_16a01.txt
SBI/SBI_txt/sbi2021_16.txt
SBI/SBI_txt/sbi2022_10.txt
SBI/SBI_txt/sbi2022_20.txt
SBI/SBI_txt/sbi2023_10.txt
SBI/SBI_txt/sbi2023_21.txt
SBI/SBI_txt/sbi2024_13.txt
SBI/SBI_txt/sbsta2022_6.txt
'SBSTA/SBSTA_txt/sbsta2014_2 (report SB 40).txt'
'SBSTA/SBSTA_txt/sbsta2014_5 (report SB 41).txt'
'SBSTA/SBSTA_txt/sbsta2015_2 (report SB 42).txt'
'SBSTA/SBSTA_txt/sbsta2015_5 (report SB 43).txt'
'SBSTA/SBSTA_txt/sbsta2016_2 (report SB 44).txt'
'SBSTA/SBSTA_txt/sbsta2016_4 (report SB 45).txt'
'SBSTA/SBSTA_txt/sbsta2017_4 (report SB 46).txt'
'SBSTA/SBSTA_txt/sbsta2017_7 (report SB 47).txt'
'SBSTA/SBSTA_txt/sbsta2018_4 (report SB 48.1).txt'
SBSTA/SBSTA_txt/sbsta2018_6.txt
'SBSTA/SBSTA_txt/SBSTA2018_8 (report).txt'
SBSTA/SBSTA_txt/sbsta2019_5.txt
SBSTA/SBSTA_txt/sbsta2021_03.txt
SBSTA/SBSTA_txt/sbsta2022_10.txt
SBSTA/SBSTA_txt/sbsta2022_6.txt
SBSTA/SBSTA_txt/sbsta2023_04.txt
SBSTA/SBSTA_txt/sbsta2023_8.txt
SBSTA/SBSTA_txt/sbsta2024_7.txt
SBSTA/SBSTA_txt/SBSTA50_report.txt
""",
            """
I will give you files pertaining to a play called "Hamlet".

The files are in the directory: /<your_path>/neuro-san-cc/deep_rag_docs/hamlet

File name structure:
* Any one file name will have a numbering system as a prefix:
    1 The 1st number of the prefix always represents the act number of the play.
      Anything part of Act 0 includes preparatory information about the play, but is not the play itself.
    2 The 2nd number of the prefix always represents the scene number of the act
    3 The 3rd number (if present) represents a change of focus within the same scene to a different group of characters.

* After the numeric prefix of a single file name, there is a very short description of what transpires
  in that scene or part of a scene.

* The ".txt" suffix that each file ends with has no bearing as to the content
  within the file other than its format and should not be considered for organizational purposes.

Grouping Constraints:
* Never mix files from different Acts in the same group.
* It's OK if a single Act needs more than one group, but only do this for numeric constraints
  or more consistent logical groupings.  If Act splitting is necessary, try to split the Act
  up such that each groups has the same number of files.

The list of files to use in order are:

1.1-Elsinore.txt
1.2-Within-the-castle.txt
1.3-In-the-house-of-Polonius.txt
1.4-The-platform.txt
1.5-Another-part-of-the-platform.txt
2.1-Room-of-Polonius.txt
2.2.1-A-room-in-the-castle.txt
2.2.2-Hamlet-and-pals.txt
3.1-A-room-in-the-castle.txt
3.2-A-hall-in-the-castle.txt
3.3-A-room-in-the-castle.txt
3.4-The-queens-closet.txt
4.1-A-room-in-the-castle.txt
4.2-Another-room-in-the-castle.txt
4.3-Another-room-in-the-castle.txt
4.4-A-plain-in-Denmark.txt
4.5-A-room-in-Elsinore-castle.txt
4.6-Another-room-in-the-castle.txt
4.7-Another-room-in-the-castle.txt
5.1-A-churchyard.txt
5.2-A-hall-in-the-castle.txt

The files are in the directory: /home/danfink/Downloads/plays/hamlet
"""
        ]
    },
    "llm_config": {
        "model_name": "gpt-4o",
    },
    "tools": [
        # This first agent definition is regarded as the "Front Man", which
        # does all the talking to the outside world/client.
        #
        # Some disqualifications from being a front man:
        #   1) Cannot use a CodedTool "class" definition
        #   2) Cannot use a Tool "toolbox" definition
        #
        # Besides the first agent being the front man, these tool definitions
        # do not have to be in any particular order. How they are linked and
        # call each other is defined within their own specs.
        # This could be a graph, potentially even with cycles.
        {
            "name": "deep_rag",

            # Note that there are no parameters defined for this guy's "function" key.
            # This is the primary way to identify this tool as a front-man,
            # distinguishing it from the rest of the tools.

            "function": {

                # The description acts as an initial prompt.
                "description": """
Give me a list of .txt files and I will create a Deep RAG
multi-agent network for you for deep insights into the text
beyond what regular RAG can do.

Good, consistent naming of the .txt files can help in defining a high-level
structure for the resulting agent network, and the order in which files
are presented can matter to the creation of the resulting network.
Any one file name should be descriptive enough to aid in proposing high-level
structure for the resulting network.

Providing some hints as to how you have structured the file names will also help.
"""
            },

            "instructions": """
1.  Take the list of file names given in the text and send them to the rough_structure
    tool to determine the high-level structure for the resulting network.
    Call the JSON output of this step the grouping_json.

2.  Pass the full grouping_json to the create_network tool.

Return what the create_network tool returns as output
""",
            "tools": ["rough_structure", "create_network"],

            "allow": {
                "to_upstream": {
                    # Specifying this allows sly_data keys from this network to be passed back
                    # to the calling client
                    "sly_data": ["agent_reservations", "aa_grouping_json"]
                }
            }
        },

        {
            "name": "rough_structure",
            "function": {
                "description": """
Creates the grouping_json
""",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "file_list": {
                            "type": "array",
                            "description": """
A list of file names that together contains the content to explore.
The order of these file names can matter.
""",
                            "items": {
                                "type": "string"
                            }
                        },
                        "user_description": {
                            "type": "string",
                            "description": """
This is a description of how the individual files in the file_list might be organized.
"""
                        },
                        "grouping_constraints": {
                            "type": "string",
                            "description": """
This is an optional description of any grouping constraints from the user.
"""
                        },
                    }
                },
            },
            "instructions": """
Examine the names of the files in the file_list and take into account any user_description
of the file naming structure to come up with a JSON structure
which describes the following:
* A short "name" for the body of work that is being pieced up which must be less that 40 characters.
* A "description" of the overall strategy for how the files are to be grouped.
    If you must mention the word 'files' in your description, use the word 'content' instead.
* A "groups" list which contains one JSON entry for each of the groups, each entry of which has:
    1. A short "name" for the group which is unique, less than 40 characters and
        is the primary reference to the group in snake case.
    2. A "description" of the group and how it is unique from the other groups.
    3. A "files" dictionary whose keys are each of the files that belong in the group and
       whose values are a snake case translation of the file name.

Constraints:
* Each and every file in the file_list must be represented in
  at least one group.
* Any single group may have at least one, but never more than 7 files in it.
* There can be at most 7 groups.
* Whenever possible follow the advice in the grouping_constraints, if that is present.

Output the JSON structure described.
""",
        },
        {
            "name": "create_network",
            "function": {
                "description": "Processes the grouping_json structure to create a network.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "files_directory": {
                            "type": "string"
                        },
                        "grouping_json": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "groups": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                         # Not necessary to go into detail yet. Trusting the caller.
                                    }
                                }
                            },
                            "required": ["name", "description", "groups"]
                        }
                    },
                    "required": ["files_directory", "grouping_json"]
                }
            },

            "class": "create_networks.CreateNetworks",
            "allow": {
                "reservations": True
            }
        }
    ]
}
